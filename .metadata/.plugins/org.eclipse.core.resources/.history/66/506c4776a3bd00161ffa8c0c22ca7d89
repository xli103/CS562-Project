package dcq.stevens.cs548.generator;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import dcq.stevens.cs562.datastructure.DCQConnDB;
import dcq.stevens.cs562.datastructure.DCQFaiStruct;

public class DCQprintFunctions {
	
	//init fai
	DCQFaiStruct fai = new DCQFaiStruct();
	//store temp string for construct input java code
	private List<String> tempJava = new ArrayList<String>();	
	//path of target file
	private static final String TARGETFILE = null;
	//path of input file
	private static final String INPUTFILE = null;
	
	//data type transfer from sql to java
	public String transferType(String str){
		switch(str){
		case "sum":
	 		return "		long ";
	 	case "integer":
	 		return "		int ";
	 	case "character varying":
	 		return "		String ";
	 	case "character":
	 		return "		char ";
	 	default:
	 		return "		int ";
		}
	}

	//function to print strings
	public void printString(String content){
		try{
			 FileWriter fw = new FileWriter(TARGETFILE, true);
			 BufferedWriter bw = new BufferedWriter(fw);
			 bw.write(content+"\r\n");
			 bw.close();
		 } catch(Exception e) {
			 System.out.print("Fail to write");
		 }
	}
	
	//get data type from database
	public List<String> getType(List<String> attribute){
		List<String> temp = new ArrayList<String>();
		try{
			DCQConnDB conn = new DCQConnDB();
			Connection ct = conn.getConn();
			PreparedStatement ps = ct.prepareStatement("select * "
					+ "from Information_schema.columns where table_name = 'sales'");
			ResultSet rs = ps.executeQuery();
			while(rs.next()){
				for(String attr : attribute){
					if(rs.getString("column_name").equals(attribute)){
						temp.add(transferType(rs.getString("data_type") + attr + ";"));
						tempJava.add(attr + (transferType(rs.getString("data_type")).equals("\t\tString ") ? " = null" : " = 0") + ";");
					}
				}
			}
			conn.closeConn(ct, ps, rs);
		}catch(Exception e){
			e.printStackTrace();
		}
		return temp;
	}
	
	//input grouping attributes and aggregation functions into java code
	public void printAttributes() {
		//grouping attribute
		List<String> list = getType(fai.getOperator_V());
		for (String str : list)
			printString(str);
		//aggregate function
		for (String agg : fai.getOperator_F()) {
			String[] arr = agg.split("_");
			printString(transferType(arr[0]) + agg + ";");
			tempJava.add(agg + " = 0;");
		}
	}
	
	//input constructor part of fai struct into java code
	public void printConstructor(){
		printString("\r\n		FaiStruct() {");
		for (String str : tempJava)
			printString("			" + str);
		printString("		}\r\n");
	}
	
	public void printSegment(int begin, int end){
		File file = new File("code segment for generator.txt");
		try {
			FileReader fr = new FileReader(file);
			BufferedReader bf = new BufferedReader(fr);
			String line;
			int count = 1;	//line number
			while((line = bf.readLine()) != null){
				if (begin <= count && count <= end) 
					printString(line);
				count++;
			}
			bf.close();
			fr.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	//read input sql and initialize fai structure
	public void readInput(){
		File file = new File(INPUTFILE);
		try{
			//read file line by line and store it into linelist
			List<String> lineList = new ArrayList<String>();
			FileReader fr = new FileReader(file);
			BufferedReader bf = new BufferedReader(fr);
			// read line function
			String line;
			while((line = bf.readLine()) != null){
				lineList.add(line);
			}
			
			//initialize fai structure
			
			//initialize projection attr
			String[] arr = lineList.get(1).split(", ");
			List<String> projAttr = Arrays.asList(arr);
			fai.setOperator_S(projAttr);
			System.out.println(fai.getOperator_S());
			
			//
		}catch(Exception e){
			
		}
	}
}
